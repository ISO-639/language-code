{"/data":{"title":"Language Data","data":{"":"Contains code lists for ISO 639-1 and ISO 639-2 as well as multi-language support.","friendly-reminder#Friendly Reminder":"We provided @iso-639/mapping mapping toolkit, which can easily help you manage language data.","usage#Usage":"With npm(or yarn, or pnpm):\nnpm install @iso-639/data\nIn .js / .ts or other files:\n// ISO 639-1 is stored in the `1` directory\nimport ISO_639_1_EN from '@iso-639/data/1/en.json'\nimport ISO_639_1_ZH_CN from '@iso-639/data/1/zh-CN.json'\n// ISO 639-2 is stored in the `2` directory\nimport ISO_639_2_EN from '@iso-639/data/2/en.json'\nimport ISO_639_2_ZH_CN from '@iso-639/data/2/zh-CN.json'\nWith CDN:\n<script>\n  const res = await fetch('https://cdn.jsdelivr.net/npm/@iso-639/data/1/en.json')\n  const json = await res.json()\n</script>","multi-language-support#Multi-language Support":"JSON files named with language codes in the source code directory are supported languages.See: Source Code","release-notes#Release Notes":"Please refer to CHANGELOG for details."}},"/getting-started":{"title":"Getting Started","data":{"":"ISO 639 is Internationally recognized code for the representation of more than 500 languages or language families.","about#About":"ISO 639, Code for individual languages and language groups, can be applied across many types of organization and situations. It is needed for the basic settings of billions of user interfaces to ICT systems and devices, as well as for the indication of different language versions of websites. It is indispensable for information management in publishing, librarianship, and for large networks.Using a language identifier (of two or three letters), rather than the name of a language, has many benefits as some cultures may have different names for the same language, while some languages may share the same, or similar, names even though they are unrelated.","usage#Usage":"If on the server side, you can use language code data as API response data.If it is on the client, such as Web App, you can rely on CDN or npm package installation and import into the project."}},"/":{"title":"Index","data":{}},"/mapping":{"title":"Language Mapping","data":{"":"ISO 639 language code mapping toolkit, which can easily help you manage language data.","usage#Usage":"With npm(or yarn, or pnpm):\nnpm install @iso-639/data @iso-639/mapping\nYes, it is recommended to also install the @iso-639/data ISO 639 data package, which contains the code data for multi-language versions of ISO 639-1 and ISO 639-2. Of course, you can also obtain this data by requesting a CDN, see the instructions of @iso-639/data for details.In .js / .ts or other files:\n// ISO 639-1 is stored in the `1` directory\nimport ISO_639_1_EN from '@iso-639/data/1/en.json'\n// ISO 639-2 is stored in the `2` directory\nimport ISO_639_2_EN from '@iso-639/data/2/en.json'\n// Exported a class\nimport { LanguageMapping } from '@iso-639/mapping'\nconst en1 = new LanguageMapping({\n  data: ISO_639_1_EN,\n  displayName: 'ISO_639_1_EN', // Optional\n  debug: true, // Optional\n})\nconst en2 = new LanguageMapping({\n  data: ISO_639_2_EN,\n  displayName: 'ISO_639_2_EN', // Optional\n  debug: true, // Optional\n})","type-declarations#Type declarations":"Core class type:\ndeclare class LanguageMapping {\n  private data\n  private displayName\n  private debug\n  constructor({ data, displayName, debug }: LanguageMappingOptions)\n  isValidCode(code: string): boolean\n  getName(code: string, codingStyle?: CodingStyle): string\n  getCode(name: string): string\n  getLanguages(): LanguageItem[]\n}\nOther auxiliary types:\ntype LanguageData = Record<string, string>\ninterface LanguageMappingOptions {\n  /**\n   * Language code JSON data from `@iso-639/data` .\n   *\n   * @see https://github.com/ISO-639/language-code/tree/main/packages/data\n   */\n  data: LanguageData\n  /**\n   * The displayName string is used in debugging messages.\n   * Usually, you donâ€™t need to set it explicitly\n   * because it has default value named `LanguageMapping`.\n   * You might want to set it explicitly if you want to\n   * display a different name for debugging purposes.\n   *\n   * @default ''\n   */\n  displayName?: string\n  /**\n   * When an error occurs in the program,\n   * an error log will be output on the console.\n   *\n   * @default false\n   */\n  debug?: boolean\n}\ninterface LanguageItem {\n  code: string\n  name: string\n}\ntype CodingStyle = 'camelCase' | 'capitalize' | 'kebabCase' | 'pascalCase'","release-notes#Release Notes":"Please refer to CHANGELOG for details."}}}